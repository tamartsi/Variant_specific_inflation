install.packages("rmarkdown")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GENESIS")
render("variant_infl_tutorial.Rmd")
install.packages(c("dummies", "knitr"))
install.packages(c("dummies", "knitr"))
render("variant_infl_tutorial.Rmd")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
render("variant_infl_tutorial.Rmd")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
setwd("~/Documents/GitHub/Variant_specific_inflation")
source("variant_specific_inflation_functions.R")
source("variant_specific_inflation_functions.R")
require(GWASTools)
require(GWASTools)
require(dummies)
require(dummies)
require(data.table)
require(GENESIS)
gds <- GdsGenotypeReader("Genotypes.gds")
scanID <- getScanID(gds)
snpID <- getSnpID(gds)
geno <- getGenotype(gds)
rownames(geno) <- snpID
colnames(geno) <- scanID
close(gds)
# load the simulated data:
phen <- getobj("Phenotypes.RData")
phen <- data.table(phen)
# this is how the data looks like:
phen
# compute residual variances by group after regressing on age:
residual_vars <- phen[, var(lm(trait ~ age)$resid), by = "group"]
residual_vars_vec <- residual_vars$V1
names(residual_varss_vec) <- residual_vars$group
names(residual_vars_vec) <- residual_vars$group
# these are the estimated residual standard deviations:
residual_vars_vec
# compute group sample sizes
ns <- table(phen$group)
# make sure that the order matches that of the residual SDs vector:
ns <- ns[names(residual_vars_vec)]
freq_list <- vector(mode = "list", length = length(unique(phen$group)))
names(freq_list) <- unique(phen$group)
for (i in 1:length(freq_list)){
freq_list[[i]] <- rowMeans(geno[,phen[group == names(freq_list[i])]$scanID],
na.rm = TRUE)/2
}
# put the frequencies in a data.frame:
eafs <- do.call(cbind, freq_list)
# make sure that the columns order matches the SD vector:
eafs <- eafs[,names(residual_vars_vec)]
expected_inf <- rep(NA, nrow(eafs))
for (j in 1:length(expected_inf)){
cur_eafs <- eafs[j,]
if (sd(cur_eafs) == 0) next
expected_inf[j] <-
compute_variant_inflation_factor(eafs = cur_eafs,
ns = ns,
sigmas = residual_vars_vec)[["Inflation_factor"]]
}
for (j in 1:length(expected_inf)){
cur_eafs <- eafs[j,]
if (sd(cur_eafs) == 0) next
expected_inf[j] <-
compute_variant_inflation_factor(eafs = cur_eafs,
ns = ns,
sigma_sqs = residual_vars_vec)[["Inflation_factor"]]
}
compute_variant_inflation_factor <- function(eafs,
ns,
sigma_sqs,
beta0=0,
study_main_effects = rep(0, length(sigma_sqs)-1)){
k <- length(eafs)
if( (length(study_main_effects) !=(k-1) ) | (length(ns) !=k) | (length(sigma_sqs) !=k) ) stop("length mismatch")
## compute sample proportions
sample_proportion <- ns/sum(ns)
xmat <- data.frame(
intercept <- rep(1, 3*k),
geno      <- rep(0:2, k),
Z         <-  model.matrix( ~factor(rep(1:k, each=3)))[,-1]
)
beta <- c(beta0,0,study_main_effects)
pr.z <- sample_proportion[rep(1:k, each=3)]
xmat <- as.matrix(xmat)
pr.x <- dbinom(xmat[,2], 2, rep(eafs, each=3))
props <- pr.x*pr.z
Bmat <- t(xmat) %*% diag(props) %*% xmat
Amat <- t(xmat) %*% diag(props) %*% diag( sigma_sqs[rep(1:k, each=3)] ) %*% xmat
# sandwitch formula for computing the SE of effect size allowing for heterogeneous vairances:
SE_true <- sqrt( (solve(Bmat) %*% Amat %*% solve(Bmat))[2,2] )
# standard SE formula:
SE_naive <- sqrt( solve(Bmat)[2,2] * sum(props*(sigma_sqs[rep(1:k, each=3)]) ) )
c(SE_true=SE_true, SE_naive=SE_naive, Inflation_factor = (SE_true/SE_naive)^2)
}
for (j in 1:length(expected_inf)){
cur_eafs <- eafs[j,]
if (sd(cur_eafs) == 0) next
expected_inf[j] <-
compute_variant_inflation_factor(eafs = cur_eafs,
ns = ns,
sigma_sqs = residual_vars_vec)[["Inflation_factor"]]
}
exp_inf <- data.frame(variant_id = snpID,
expected_inf = expected_inf,
stringsAsFactors = FALSE)
phen$group <- as.factor(phen$group)
phen <- data.frame(phen)
# fit null model (homogeneous residual variance).
nullmod_homogeneous <- fitNullModel(phen,
outcome = "trait",
covars = c("group","age"),
verbose = FALSE)
nullmod_homogeneous_rn <- nullModelInvNorm(nullmod_homogeneous,
norm.option = "all",
rescale = "residSD",
verbose = FALSE)
### association tests
gds <- GdsGenotypeReader("Genotypes.gds")
genoData <- GenotypeData(gds, scanAnnot = ScanAnnotationDataFrame(phen))
iterator <- GenotypeBlockIterator(genoData)
assoc_homogeneous <- assocTestSingle(iterator, nullmod_homogeneous_rn)
close(gds)
pval_df <- data.frame(variant_id = assoc_homogeneous$variant.id,
homogeneous_variance = assoc_homogeneous$Score.pval)
exp_inf <- exp_inf[match(pval_df$variant_id, exp_inf$variant_id),]
qq_plot_by_region(pval_df = pval_df[,c("homogeneous_variance"), drop = FALSE],
expected_inf = exp_inf$expected_inf,
inflated_val = 1.03,
deflated_val = 0.97,
thin_high_pvals = 1e5,
figure_file_name = "qq_plots_homo_var.png")
nullmod_hetero <- fitNullModel(phen,
outcome = "trait",
covars = c("group","age"),
group.var = "group",
verbose = FALSE)
nullmod_hetero_rn <- nullModelInvNorm(nullmod_hetero,
norm.option = "all",
rescale = "residSD",
verbose = FALSE)
# testing again:
gds <- GdsGenotypeReader("Genotypes.gds")
genoData <- GenotypeData(gds, scanAnnot = ScanAnnotationDataFrame(phen))
iterator <- GenotypeBlockIterator(genoData)
assoc_hetero <- assocTestSingle(iterator, nullmod_hetero_rn)
assoc_hetero <- assocTestSingle(iterator, nullmod_hetero_rn)
close(gds)
pval_df <- data.frame(variant_id = assoc_homogeneous$variant.id,
homogeneous_variance = assoc_homogeneous$Score.pval,
stratified_variance = assoc_hetero$Score.pval)
exp_inf <- exp_inf[match(pval_df$variant_id, exp_inf$variant_id),]
qq_plot_by_region(pval_df = pval_df[,c("homogeneous_variance","stratified_variance")],
expected_inf = exp_inf$expected_inf,
inflated_val = 1.03,
deflated_val = 0.97,
thin_high_pvals = 1e5,
figure_file_name = "qq_plots_homo_strat_var.png")
render("variant_infl_tutorial.Rmd")
require(rmarkdown)
install.packages("rmarkdown")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
require(rmarkdown)
render("variant_infl_tutorial.Rmd")
